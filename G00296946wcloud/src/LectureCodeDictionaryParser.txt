package ie.gmit.dip;
//Lecture Code for DictionaryParser
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.List;

public class DictionaryParser {
	
	public static List<String> getWords(String file) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(file))));
		String word = null; //initialise var
		
		List<String> words=new LinkedList<String>(); //linkedList
		while ((word=br.readLine())!=null) {
			words.add(0,word); //words will begin at the zeroeth index
		}
		return words;
	}
	
}

package ie.gmit.dip;

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class MapRunner {
	private static final String DICTIONARY_FILE = "./dictionary.txt";
	private Map<String, Integer> table = new TreeMap<String, Integer>();

	public void process(String[] words) {
		for (String word : words) {
			String lcWord = word.toLowerCase();

			int frequency = 1;
			if (table.containsKey(lcWord)) { // O(1)
				frequency = table.get(lcWord);
				frequency++;
			}
			table.put(lcWord, new Integer(frequency)); // O(1)
		}
		System.out.println(table);

		Map<String, Integer> sortedMap = new TreeMap<String, Integer>(table); //O logn runtime
		System.out.println(sortedMap);

		Set<String> keys = new TreeSet<String>(table.keySet());

		for (String key : keys) {
			int number = table.get(key); // O(1)
		}

		Collection<Integer> values = table.values();
		for (Integer val : values) {
			System.out.println(val);
		}
	}
}

// public static void main(String[] args) {
// new MapRunner().process(DictionaryParser.getWords(DICTIONARY_FILE));
// }